name: Pull Files from Another Repository on Push
env:
  ORIGINREPO: Descolada/AHK-v2-libraries  #lwcorp/lwsmtp-server
  AUTOMATIC_MONITOR: true
  FILES: "*" #  "*.au3 LICENSE" # separate multiple entries with ,
  FILES_NEW: "*.au3 LICENSE*" # separate multiple entries with ,
  EXTRA: mv LICENSE LICENSE_LWServer-SMTP # do an extra command like renaming
  USERNAME: ${{ github.actor }}
  ADDRESS_SUFFIX: users.noreply.github.com
  TOKEN_NAME: ACCESS_TOKEN # name of token defined in the target repo's settings, needed for private repos
  # SOURCE_BRANCH: source_alternate_branch # uncomment to takes files from a non default source branch
  # TARGET_BRANCH: target_alternate_branch # uncomment to monitor a non default target branch
  # TARGET_PATH: target_alternate_path # uncomment to monitor a non default target branch
  THE_SERVER: ${{ github.server_url }}
  TEMP_PATH: temp_folder
 # THISREPO_LIB_ABSPATH: ''
 # THISREPO_LIB_RELPATH: ''
 # TEMPREPO_LIB_RELPATH: ''
 # TEMPREPO_LIB_ABSPATH: ''
 # THISREPO_ROOT_ABSPATH: ''
  THE_SECRET: ${{ secrets.TOKEN_NAME || 'default_value' }}

on: # Remove # below for non default branches
  workflow_dispatch:
  push:
#    branches:
#      - ${{ env.TARGET_BRANCH }}
#    paths:
#      - ${{ env.TARGET_PATH }}

jobs:
  pull-file:
    runs-on: ubuntu-latest
    steps:
      - name: Check whether to automatically monitor
        if: ${{ github.event_name != 'workflow_dispatch' && env.AUTOMATIC_MONITOR == false }}
        run: |
          echo "Set not to run automatically. Exiting."
          echo "exiting1=true" >> $GITHUB_ENV

      - name: Checkout this repo (clone to this runner workdir)
        if: env.exiting1 != 'true'
        uses: actions/checkout@v3

      - name: get this repo root
        run: |
          echo "THISREPO_ROOT_ABSPATH=$PWD">> $GITHUB_ENV

      - name: Checkout source with token and branch
        if: env.exiting1 != 'true' && env.THE_SECRET != 'default_value' && env.SOURCE_BRANCH
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ORIGINREPO }}
          ref: ${{ env.SOURCE_BRANCH }}
          token: ${{ secrets[env.TOKEN_NAME] }}
          path: ${{ env.TEMP_PATH }}

      - name: Checkout source with token but without branch
        if: env.exiting1 != 'true' && env.THE_SECRET != 'default_value' && !env.SOURCE_BRANCH
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ORIGINREPO }}
          token: ${{ secrets[env.TOKEN_NAME] }}
          path: ${{ env.TEMP_PATH }}

      - name: Checkout source without token but with branch
        if: env.exiting1 != 'true' && env.THE_SECRET == 'default_value' && env.SOURCE_BRANCH
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ORIGINREPO }}
          ref: ${{ env.SOURCE_BRANCH }}
          path: ${{ env.TEMP_PATH }}

      - name: Checkout source without token and without branch
        if: env.exiting1 != 'true' && env.THE_SECRET == 'default_value' && !env.SOURCE_BRANCH
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ORIGINREPO }}
          path: ${{ env.TEMP_PATH }}

      - name: Update
        if: env.exiting1 != 'true'
        run: |
          cd $TEMP_PATH

          echo "TEMP_ROOT_RELPATH=$TEMP_PATH" >> $GITHUB_ENV
          echo "TEMP_ROOT_ABSPATH    $(realpath "$THISREPO_ROOT_ABSPATH/$TEMP_PATH")"  >> $GITHUB_ENV


          echo "temp root ABSPATH: " $TEMP_ROOT_ABSPATH
          
          $EXTRA
          rsync -av --exclude='.git' --exclude='.*' . ../
          cd ..
#          cp -rv . ../


      - name: Get paths to lib dir
        run: |

          echo "TEMPREPO_LIB_RELPATH=$(find "$TEMP_PATH" -type d -iname "lib" | head -n 1)"  >> $GITHUB_ENV
          echo "TEMPREPO_LIB_ABSPATH: " $(realpath --relative-to="$THISREPO_ROOT_ABSPATH" "$TEMPREPO_LIB_RELPATH")


             # Output the results

          
          echo "TEMP repo lib location:"
          echo "  ABSPATH: $TEMPREPO_LIB_ABSPATH"
          echo "  RELPATH: $TEMPREPO_LIB_RELPATH"

          echo "THIS repo lib location:"
          echo "  ABSPATH: $THISREPO_LIB_ABSPATH"
          echo "  RELPATH: $THISREPO_LIB_RELPATH"       
      # echo "THISREPO_LIB_ABSPATH=$(find "$THISREPO_ROOT_ABSPATH" -type d -iname "lib" | head -n 1)"  >> $GITHUB_ENV
      # echo "THISREPO_LIB_RELPATH=$(realpath --relative-to="$THISREPO_ROOT_ABSPATH" "$THISREPO_LIB_ABSPATH")"  >> $GITHUB_ENV
        #  echo "TEMPREPO_LIB_RELPATH=$THISREPO_LIB_RELPATH"  >> $GITHUB_ENV
        #  echo "TEMPREPO_LIB_ABSPATH="$THISREPO_ROOT_ABSPATH/$TEMP_PATH/$TEMPREPO_LIB_RELPATH"  >> $GITHUB_ENV



        
      - name: simulate diff
        run: |
          ls -Alt
          echo "current dir: " $PWD 
          echo "folder 1: " $PWD
          echo "folder 2: " $PWD/temp_folder
          ls -Alt $PWD/temp_folder

      - name: Test Diff
        run: |
          
          ABSOLUTE_PWD=$(pwd)
          if [[ "$ORIGINREPO_LIB_PATH" = /* ]]; then
            ORIGINREPO_ORIGINREPO_LIB_PATH="$ORIGINREPO_LIB_PATH"
          else
            ORIGINREPO_ORIGINREPO_LIB_PATH="$ABSOLUTE_PWD/$ORIGINREPO_LIB_PATH"
          fi

          git diff --name-only --quiet --no-index $ABSOLUTE_PWD $ORIGINREPO_LIB_PATH
          
      - name: Check for changes
        if: env.exiting1 != 'true'
        run: |
          if git diff --name-only --quiet --no-index $ABSOLUTE_PWD $ORIGINREPO_LIB_PATH > /dev/null 2>&1; then
            echo "No changes detected. Exiting."
            echo "exiting2=true" >> $GITHUB_ENV
          else
            echo "changes detected!"
            echo "copying content from " $ORIGINREPO_LIB_PATH " to " $ABSOLUTE_PWD
          fi
          
      #git commit -m "Pulled files from $THE_SERVER/$ORIGINREPO."

      - name: Copy
        run: |
          rsync -av --update --exclude='.git' --exclude='.*' "$ORIGINREPO_LIB_PATH" "$ABSOLUTE_PWD"
          echo "sync completed!"

        
 #    - name: Commit
 #       if: env.exiting1 != 'true' && env.exiting2 != 'true'
 #       run: |
 #         git config user.name "$USERNAME"
 #         git config user.email "$USERNAME@$ADDRESS_SUFFIX"
 #         git add $ORIGINREPO_LIB_PATH


 #     - name: Push
 #       if: env.exiting1 != 'true' && env.exiting2 != 'true'
 #       run: |
 #         if [ -n "$TARGET_BRANCH" ]; then
 #           git push origin $TARGET_BRANCH
 #         else
 #           git push
 #         fi
